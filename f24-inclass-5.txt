CISC 3300 F24 
In class assignment 5 
1. The Document Object Model (DOM) specifies how browsers should create a model of an HTML page and how JavaScript can access and update the contents of a web page while it is in the browser window. 
2. If a malicious user adds code to an input that is eventually generated as html, that code could potentially be run for different users, this is an example of Cross Site Scripting Attack. 3. HTML events are “things” that happen to HTML elements. 
4. addEventListner sets up a function that will be called whenever the specified event is delivered to the target. 
5. jQuery takes a lot of common tasks that require many lines of JavaScript code to accomplish, and wraps them into methods that you can call with a single line of code. 6. The .val() function grabs the value of inputs in jQuery. 
7. Do the following: 
a. Create: 
i. a webpage with html, body, and head elements. 
ii. a div element with an id of “container”. 
iii. a script tag in the head element 
b. We need to wait for our elements to load into the DOM before we can manipulate them. In the script tag add an event listener for the ‘load’ event to the global window object, window.addEventListener(‘load’, function(e) {}). 
c. Now in the function of the event listener create a variable called containerDiv that contains a reference to the dom node of our div with the id of “container” via the document.getElementById function with “container” as a string parameter. 
d. Next we will give the div a text node by creating a variable that will contain the reference to our text node after we create it. So create a variable called textNode and assign it the output of a document.createTextNode with a string param of “in class 5”. Now we can call the appendChild function on our containerDiv variable with the textNode variable as a parameter. 
e. Now let’s update the class of our div. First let’s make a style tag on our webpage with a css rule for a container-color class. Set “color” to blue. Then back in our script tag access the classList property of the containerDiv node object and call the add function with the string of “container-color” as a parameter: 
containerDiv.classList.add(). Now when you load the page you should see “in class 5” text with blue color. 
8. Create a button element, give it an id of “event-button” and content of “click me”. Back in the window event listener for the load event under the code for question 7. Create a new variable called buttonElement and assign to it the output of document.getElementById with “event-button” as a string param. Next add an eventListener to the buttonElement dom object and for the event string put “click”. In the event listener function callback create a new variable called appendDiv and assign to it the output of 
document.createElement with a string param of “div”. Create another variable called
appendDivText and assign to it the output of document.createTextNode with a string param of “new text”. Call the appendChild function on the newDiv DOM node object with newDivTextContent as the param, and call appendChild on the containerDiv DOM node object with newDiv as the param. Now a new div with the text “new text” should be added every time the button is clicked. 
9. Now we are going to write the same functionality of question 7 but in jQuery a. add a jQuery CDN link, make sure it is before any script tags, you can find one in the lecture code for JS chapter 7. 
b. We need to run our code after the page has been initialized again, the $ symbol is the shorthand for the jQuery function and giving it a string is a further shorthand for a jQuery selector. The correct way to listen for a page load event in jQuery is $(document).ready which expects a callback function. 
c. In that callback function we need to select our div element we can do that with the shorthand selector $(); and the selector we would use is #container as a string, notice that we use the pound sign like we did in CSS. Chaining onto that selection we can change the text with the .text(); function and give it a string parameter of “in class 5”. We can chain onto the selection again after the .text() function by calling the .attr() function, which expects an attribute name as a first parameter and an attribute value as a second parameter, so ‘class’ and ‘container-color’. 
10. And now we can rewrite the functionality of question 8 in jQuery 
a. in our document.ready callback under the code for question 9 we need to select our button element by id, so $('#event-button'). Then use the .on() jQuery event handler function, which expects the first parameter to be the name of an event as a string, and then a callback function. So we will give it ‘click’ and a function, in that function we need to select our container element by its id so $('#container') and then call the append function which expects a string of html code. So we can give it “<div>new text</div>”. Now if you click the button, two divs with “new text” should appear. Hopefully you’ll agree that using jQuery makes for a faster, cleaner, coding experience.